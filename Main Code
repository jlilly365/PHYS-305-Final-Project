#include <stdio.h>
#include <math.h>

float RHS(int ieq, float R, float M, float P, float D)
{
  //differential mass
  float dM = 0.0;
  
  //differential pressure
  float dP = 0.0; 
  
  //exponent number for pressure = density ^ gamma
  float gamma = 4.0 / 3.0; 
  
  //keeps denominators from being 0
  float soft = 0.000001;
 
  //both differential equations are dimensionless

  //equation for mass
  if(ieq == 0)
    {
      dM = D * pow(R,2);
      return dM;   
    }

  //equation for pressure
  else if(ieq == 1)
    {
      dP = -1.0 * (M / (2.0 * (pow(R,2) + soft))) * (1.0 + pow(P, 1.0 - (1.0 / gamma))) * (1.0 + (pow(R,3) * P) / (M + soft)) / 
	(1.0 - (M / (R + soft)));
      return dP;
    }
}

int main(void)
{
  //mass, degen. pressure (outward)  
  float k1[2] = {0.0, 1.76};
  
  //mid values for everything above
  float k2[2] = {0.0, 0.0}; 
  
  // mid vals of the mid vals
  float k3[2] = {0.0, 0.0}; 
  
  //mid vals of the mid vals of the mid vals
  float k4[2] = {0.0, 0.0}; 
 
  //density
  float D = 1.53;  
  
  //radius
  float R = 0.0;     
  
  //exponent number for p = dens ^ gamma  
  float gamma = 4.0 / 3.0;  
  
  //number of steps
  float steps = 128;	
  
  //actual incremental radius step
  float dR = 1.75 / (float)steps;  
  
  //radius loop counter
  int i = 0;
  
  //equation loop counter 	   	         
  int j = 0;     
  
  //individual half-step counters 
  int l, m, n;                   
  
  //radius goes from almost 0 to well beyond what should be the minimum radius  
  for(i = 1; i <= steps ; i++) 
    {	     
      //to calculate mass and pressure for each half step
      for(j = 0; j < 2; j++)
	{    
	  k2[j] = k1[j] + (dR / 2.0) * RHS(j,R,k1[0],k1[1],D);
	}

      for(l = 0; l < 2; l++)
	{ 
	  k3[l] = k2[l] + (dR / 2.0) * RHS(l,R,k2[0],k2[1],D);
	}

      for(m = 0; m < 2; m++)
	{
	  k4[m] = k3[m] + (dR / 2.0) * RHS(m,R,k3[0],k3[1],D);
	}

      for(n = 0; n < 2; n++)
	{
	  k1[n] = k1[n] + dR * RHS(n,R,k4[0],k4[1],D);
	}
      
      //increase radius by differential amount     
      R = R + dR;

      //get density for final radius    
      D = pow(k1[1], (1.0/gamma));
    }

  //the end :)
  return 0;
}
